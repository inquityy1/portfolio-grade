name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    env:
      NX_DAEMON: false
      NX_CLOUD_DISTRIBUTED_EXECUTION: false
      NX_CLOUD_DISTRIBUTED_EXECUTION_AGENT_COUNT: 0

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: portfolio_grade
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/portfolio_grade?schema=public

      - name: Seed database
        run: npm run prisma:seed
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/portfolio_grade?schema=public

      - name: Build shared package
        run: npx nx build shared --skip-nx-cache

      - name: Build API
        run: npx nx build api --skip-nx-cache
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/portfolio_grade?schema=public
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_access_secret
          JWT_REFRESH_SECRET: test_refresh_secret
          JWT_ACCESS_TTL: 900s
          JWT_REFRESH_TTL: 7d
          TENANT_HEADER: X-Org-Id
          NODE_ENV: test

      - name: Build Admin
        run: npx nx build admin --skip-nx-cache
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Build Portal
        run: npx nx build portal --skip-nx-cache
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Start API server
        run: |
          nohup npx nx run api:serve --port=3000 --skip-nx-cache > api.log 2>&1 &
          API_PID=$!
          echo "API_PID=$API_PID" >> $GITHUB_ENV
          sleep 5
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/portfolio_grade?schema=public
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: test_access_secret
          JWT_REFRESH_SECRET: test_refresh_secret
          JWT_ACCESS_TTL: 900s
          JWT_REFRESH_TTL: 7d
          TENANT_HEADER: X-Org-Id
          NODE_ENV: test

      - name: Start Admin server
        run: |
          nohup npx nx run admin:serve --port=4200 --skip-nx-cache > admin.log 2>&1 &
          ADMIN_PID=$!
          echo "ADMIN_PID=$ADMIN_PID" >> $GITHUB_ENV
          sleep 5
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Start Portal server
        run: |
          nohup npx nx run portal:serve --port=4201 --skip-nx-cache > portal.log 2>&1 &
          PORTAL_PID=$!
          echo "PORTAL_PID=$PORTAL_PID" >> $GITHUB_ENV
          sleep 5
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Check server logs
        run: |
          echo "=== API Server Log ==="
          cat api.log || echo "No API log found"
          echo "=== Admin Server Log ==="
          cat admin.log || echo "No Admin log found"
          echo "=== Portal Server Log ==="
          cat portal.log || echo "No Portal log found"
          echo "=== Process Status ==="
          ps aux | grep -E "(nx|node|vite)" | grep -v grep || echo "No processes found"

      - name: Wait for services to be ready
        run: |
          echo "Waiting for API server..."
          timeout 120 bash -c 'until curl -s http://localhost:3000/api/docs > /dev/null; do sleep 3; done'
          echo "API server is ready!"

          echo "Waiting for Admin server..."
          timeout 120 bash -c 'until curl -s http://localhost:4200 > /dev/null; do sleep 3; done'
          echo "Admin server is ready!"

          echo "Waiting for Portal server..."
          timeout 120 bash -c 'until curl -s http://localhost:4201 > /dev/null; do sleep 3; done'
          echo "Portal server is ready!"

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run Admin E2E tests
        run: npx playwright test --config=apps/admin-e2e/playwright.config.ts --project=chromium
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Run Portal E2E tests
        run: npx playwright test --config=apps/portal-e2e/playwright.config.ts --project=chromium
        env:
          VITE_API_URL: http://localhost:3000/api

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
